#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import asyncio
import itertools
import random
import logging
import time
import hashlib

from telethon import TelegramClient, errors
from telethon.errors import (SessionPasswordNeededError, FloodWaitError,
                            UserChannelsTooMuchError)
from telethon.tl.functions.messages import AddChatUserRequest
from telethon.tl.functions.channels import (InviteToChannelRequest,
                                            JoinChannelRequest,
                                            GetParticipantsRequest)
from telethon.tl.types import (ChannelParticipantsSearch, InputPeerUser)
from telethon.network import ConnectionTcpMTProxy
from telethon.connection import ConnectionTcpFull


from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage

SETTINGS_DIR = "settings"
USERNAME_DIR = "username"
API_DIR = "api"
DATABASE_DIR = "database"
SESSION_DIR = "session"

DELAY_FILE = os.path.join(SETTINGS_DIR, "delay.py")
CONFIG_FILE = os.path.join(SETTINGS_DIR, "config.py")
DEST_FILE = os.path.join(SETTINGS_DIR, "dest.py")
PROXY_FILE = os.path.join(SETTINGS_DIR, "proxy.txt")

USERNAMES_FILE = os.path.join(USERNAME_DIR, "usernames.txt")
USED_FILE = os.path.join(USERNAME_DIR, "used.txt")

API_KEYS_FILE = os.path.join(API_DIR, "api_keys.txt")

DB_FILE = os.path.join(DATABASE_DIR, "clientbot_test.db")
BOT_DB_FILE = os.path.join(DATABASE_DIR, "bot_data.db")

sys.path.append(SETTINGS_DIR)
sys.path.append(DATABASE_DIR)

from database import pickledb

from delay import (delay_after_join, delay_after_invite, delay_after_error,
                   delay_between_accounts, delay_between_clients)

from dest import dest
from config import MAX_ACCOUNTS_PER_API, BOT_TOKEN, ADMIN_ID, LOG_CHANNEL_ID

logging.basicConfig(level=logging.ERROR, format='%(asctime)s - %(levelname)s - %(message)s')

GREEN = "\033[92m"
RED = "\033[91m"
YELLOW = "\033[93m"
RESET = "\033[0m"

def colored_print(message, color):
    print(f"{color}{message}{RESET}")

os.makedirs(SETTINGS_DIR, exist_ok=True)
os.makedirs(USERNAME_DIR, exist_ok=True)
os.makedirs(API_DIR, exist_ok=True)
os.makedirs(DATABASE_DIR, exist_ok=True)
os.makedirs(SESSION_DIR, exist_ok=True)

accounts = {}
dests = {}
accounts_on_cooldown = {}
session_names = []
last_account_switch_time = 0
inviting_paused = False

bot = Bot(token=BOT_TOKEN, parse_mode=types.ParseMode.HTML)
storage = MemoryStorage()
dp = Dispatcher(bot, storage=storage)

bot_db = pickledb.load(BOT_DB_FILE, False)
if not bot_db.get('inviting_paused'):
    bot_db.set('inviting_paused', False)
    bot_db.dump()

def get_file_hash(filepath):
    hasher = hashlib.sha256()
    if not os.path.exists(filepath):
        return None
    with open(filepath, 'rb') as file:
        while True:
            chunk = file.read(4096)
            if not chunk:
                break
            hasher.update(chunk)
    return hasher.hexdigest()

async def create_telegram_account(session_name, api_id, api_hash, proxy=None):
    session_path = os.path.join(SESSION_DIR, session_name)
    try:
        if proxy:
            proxy_type, addr, port, username, password = proxy

            if proxy_type.lower() == 'mtproto':
                account = TelegramClient(session_path, api_id, api_hash,
                                         connection=ConnectionTcpMTProxy,
                                         proxy=(addr, port, username))
            else:
                account = TelegramClient(session_path, api_id, api_hash,
                                         connection=ConnectionTcpFull,
                                         proxy=(proxy_type, addr, port, username, password))
        else:
            account = TelegramClient(session_path, api_id, api_hash,
                                     connection=ConnectionTcpFull)

        await account.connect()

        if not await account.is_user_authorized():
            colored_print(f"  ‚õî –°–µ—Å—Å–∏—è {session_name} –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ üòî. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...", RED)
            await send_log_to_telegram(f"‚ùå –°–µ—Å—Å–∏—è <b>{session_name}</b> –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∞ üòî.")
            return None

        try:
            me = await account.get_me()
            if not me.first_name:
                raise ValueError("–£ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è.")
        except ValueError as e:
            colored_print(f"  ‚õî –û—à–∏–±–∫–∞: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–µ—Å—Å–∏—é {session_name}", RED)
            await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ <b>{session_name}</b>: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–º—è üò¢.")
            return None
        except Exception as e:
            colored_print(f"  ‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", RED)
            await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ <b>{session_name}</b>: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞.")
            return None

    except Exception as e:
        colored_print(f"  ‚õî –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {session_name}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...", RED)
        await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{session_name}</b>: {e}")
        return None

    return account


async def send_log_to_telegram(message):
    try:
        await bot.send_message(LOG_CHANNEL_ID, message)
    except Exception as e:
        colored_print(f"  ERROR –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥-–∫–∞–Ω–∞–ª: {e} üò¢", RED)
        await bot.send_message(LOG_CHANNEL_ID, message)


@dp.message_handler(commands=['start'])
async def start_bot(message: types.Message):
    if str(message.from_user.id) == ADMIN_ID:
        await message.reply("ü§ñ –ë–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! ‚úÖ –û–∂–∏–¥–∞—é –∫–æ–º–∞–Ω–¥... üì°")


async def main():
    global last_account_switch_time, session_names, inviting_paused, db

    colored_print("üöÄüöÄüöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞!  –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É! ‚ú®‚ú®‚ú®", GREEN)
    await send_log_to_telegram("üöÄüöÄüöÄ <b>–ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞!</b> –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É! ‚ú®‚ú®‚ú®")

    try:
        with open(API_KEYS_FILE, 'r') as f:
            api_keys = [line.strip().split(':') for line in f if line.strip()]
    except FileNotFoundError:
        colored_print(f"  ‚õî –§–∞–π–ª {API_KEYS_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏.", RED)
        await send_log_to_telegram(f"‚ùå –§–∞–π–ª <code>{API_KEYS_FILE}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª —Å API –∫–ª—é—á–∞–º–∏.")
        sys.exit(1)

    if not api_keys:
        colored_print(f"  ‚õî –§–∞–π–ª {API_KEYS_FILE} –ø—É—Å—Ç–æ–π ü´•. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏.", RED)
        await send_log_to_telegram(f"‚ùå –§–∞–π–ª <code>{API_KEYS_FILE}</code> –ø—É—Å—Ç–æ–π ü´•. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–æ–±–∞–≤–∏—Ç—å API –∫–ª—é—á–∏.")
        sys.exit(1)

    api_key_cycle = itertools.cycle(api_keys)

    proxies = []
    if os.path.exists(PROXY_FILE):
        try:
            with open(PROXY_FILE, 'r') as f:
                for line in f:
                    line = line.strip()
                    if line:
                        try:
                            parts = line.split(':')
                            if len(parts) == 3:
                                proxy_type = 'mtproto'
                                addr, port, secret = parts
                                proxies.append((proxy_type, addr, int(port), secret, None))
                            elif len(parts) >= 2:
                                if len(parts) == 4:
                                      proxy_type, addr, port, userpass = parts
                                      username, password = userpass.split(':', 1)
                                elif len(parts) == 2:
                                    addr, port = parts
                                    proxy_type = 'http'
                                    username, password = None, None
                                elif len(parts) == 3:
                                    try:
                                        proxy_type, addr, port = parts
                                        username, password = None, None
                                    except ValueError:
                                        addr, port, userpass = parts
                                        username, password = userpass.split(':', 1)
                                        proxy_type = 'http'
                                proxies.append((proxy_type, addr, int(port), username, password))
                            else:
                                 raise ValueError(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏ –≤ —Å—Ç—Ä–æ–∫–µ: {line}")
                        except ValueError as e:
                            colored_print(f"  ‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ø—Ä–æ–∫—Å–∏: {e}. –°—Ç—Ä–æ–∫–∞: {line}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...", YELLOW)
                            continue


        except FileNotFoundError:
            colored_print(f"  ‚ö† –§–∞–π–ª {PROXY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.", YELLOW)
            await send_log_to_telegram("‚ö† –§–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
        except Exception as e:
            colored_print(f"  ‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {PROXY_FILE}: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏.", RED)
            await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ —Å –ø—Ä–æ–∫—Å–∏: {e}. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
    else:
        colored_print(f"  ‚ö† –§–∞–π–ª {PROXY_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.", YELLOW)
        await send_log_to_telegram("‚ö† –§–∞–π–ª —Å –ø—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω. –†–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")

    proxy_cycle = itertools.cycle(proxies) if proxies else None

    session_names = [f for f in os.listdir(SESSION_DIR) if f.endswith('.session')]
    if not session_names:
        colored_print(f"  ‚õî –ü–∞–ø–∫–∞ {SESSION_DIR} –ø—É—Å—Ç–∞—è ü´•. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π Telegram.", RED)
        await send_log_to_telegram(f"‚ùå –ü–∞–ø–∫–∞ <code>{SESSION_DIR}</code> –ø—É—Å—Ç–∞—è ü´•. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã —Å–µ—Å—Å–∏–π Telegram.")
        sys.exit(1)

    api_key_counts = {}
    valid_session_names = []
    for session_name in session_names:
        colored_print(f'  ‚úÖ –ü—Ä–æ–±—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç {session_name} üí´', GREEN)
        api_id, api_hash = next(api_key_cycle)
        proxy = next(proxy_cycle) if proxy_cycle else None

        account = await create_telegram_account(session_name, api_id, api_hash, proxy)

        if account:
            try:
                dests[session_name] = await account.get_entity(dest)
                valid_session_names.append(session_name)
                accounts[session_name] = account
                colored_print(f'    üü¢ –ê–∫–∫–∞—É–Ω—Ç {session_name} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! ‚ú®', GREEN)
                await send_log_to_telegram(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç <b>{session_name}</b> —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! ‚ú®")

                if (api_id, api_hash) not in api_key_counts:
                    api_key_counts[(api_id, api_hash)] = 0
                api_key_counts[(api_id, api_hash)] += 1
                if api_key_counts[(api_id, api_hash)] > MAX_ACCOUNTS_PER_API:
                    colored_print(f"  ‚õî –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ ({MAX_ACCOUNTS_PER_API}) –Ω–∞ –æ–¥–Ω–æ–º –∫–ª—é—á–µ API {api_id}:{api_hash}. ü§Ø", RED)
                    await send_log_to_telegram(f"‚ùå –ü—Ä–µ–≤—ã—à–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –Ω–∞ API: <b>{api_id}:{api_hash}</b>. ü§Ø")
                    sys.exit(1)
            except Exception as e:
                colored_print(f"  ‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {session_name}: {e}. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º.", RED)
                await send_log_to_telegram(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å–µ—Å—Å–∏–∏ <b>{session_name}</b>: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ü–µ–ª–µ–≤–æ–π –≥—Ä—É–ø–ø–µ üòî.")
                continue
        else:
            pass


    if not valid_session_names:
        colored_print("  ‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ üò≠. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.", RED)
        await send_log_to_telegram("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ üò≠. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
        sys.exit(1)

    session_names = valid_session_names
    colored_print('üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üí™üéâ', GREEN)
    await send_log_to_telegram("üèÅ –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! üí™üéâ")

    db = pickledb.load(DB_FILE, True)


    current_usernames_hash = get_file_hash(USERNAMES_FILE)
    previous_usernames_hash = db.get('usernames_hash')

    if current_usernames_hash != previous_usernames_hash:
        colored_print("  üîÑ –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª—Å—è üîÑ. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ üòâ.", GREEN)
        await send_log_to_telegram("üîÑ –§–∞–π–ª —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑–º–µ–Ω–∏–ª—Å—è. –ù–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞ üòâ.")
        db.set('start', 0)
        db.set('usernames_hash', current_usernames_hash)
        ind = 0
    else:
        ind = int(db.get('start')) if db.get('start') is not None else 0
        with open(USERNAMES_FILE, 'r') as f:
            usernames_list = [line.strip() for line in f]
        start_username = usernames_list[ind] if ind < len(usernames_list) else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω ü§∑"

        colored_print(f'  üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {start_username} (–Ω–æ–º–µ—Ä {ind}) üîÑ', GREEN)
        await send_log_to_telegram(f"üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <b>{start_username}</b> (–Ω–æ–º–µ—Ä <b>{ind}</b>) üîÑ")

    joined_group = {session_name: False for session_name in session_names}

    try:
        with open(USERNAMES_FILE, 'r') as f:
            usernames = [line.strip() for line in f]
    except FileNotFoundError:
        colored_print(f"  ‚õî –§–∞–π–ª {USERNAMES_FILE} –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢.", RED)
        await send_log_to_telegram(f"‚ùå –§–∞–π–ª <code>{USERNAMES_FILE}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω üò¢.")
        usernames = []

    if not usernames:
        while True:
            source_chat_url = input(f"  üìù –§–∞–π–ª {USERNAMES_FILE} –ø—É—Å—Ç–æ–π ü´•. –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç, –æ—Ç–∫—É–¥–∞ –±—Ä–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ")
            try:
                if valid_session_names:
                    account = accounts[valid_session_names[0]]
                    source_chat = await account.get_entity(source_chat_url)
                    break
                else:
                    colored_print("  ‚õî –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ üò≠. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.", RED)
                    await send_log_to_telegram("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —á–∞—Ç–µ üò≠. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                    sys.exit(1)
            except ValueError:
                colored_print("  ‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ ü§ï. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.", RED)
                await send_log_to_telegram(f"‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è —Å—Å—ã–ª–∫–∞ ü§ï: <code>{source_chat_url}</code>")
            except Exception as e:
                colored_print(f"  ‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: {e}", RED)
                await send_log_to_telegram(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ: <code>{source_chat_url}</code>: {e}")
                break

        try:
            participants = await account(GetParticipantsRequest(
                source_chat,
                ChannelParticipantsSearch(''),
                0, 1000,
                hash=0
            ))
            usernames = [user.username for user in participants.users if user.username]
            await send_log_to_telegram(f"‚úÖ –ü–æ–ª—É—á–∏–ª–∏ —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞ <code>{source_chat_url}</code> ({len(usernames)} —á–µ–ª–æ–≤–µ–∫) üéâ.  –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É! ü§ù")

        except Exception as e:
            colored_print(f"  ‚õî –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}", RED)
            await send_log_to_telegram(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —á–∞—Ç–∞: {e}")
            sys.exit(1)


    while True:
        if bot_db.get('inviting_paused'):
            await asyncio.sleep(5)
            continue

        if ind >= len(usernames):
            colored_print('  üéâüéâüéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ! üéâüéâüéâ', GREEN)
            await send_log_to_telegram("üéâüéâüéâ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ! üéâüéâüéâ")
            break

        username = usernames[ind]

        current_time = time.time()
        if current_time - last_account_switch_time < delay_between_clients:
            remaining_delay = delay_between_clients - (current_time - last_account_switch_time)
            colored_print(f"  ‚è≥ –ñ–¥—ë–º {remaining_delay:.2f} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–º–µ–Ω–æ–π –∞–∫–∫–∞—É–Ω—Ç–∞ ‚è±", YELLOW)
            await asyncio.sleep(remaining_delay)

        rd_session_name = random.choice(session_names)
        colored_print(f'  üîÑ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –∞–∫–∫–∞—É–Ω—Ç {rd_session_name} ‚öôÔ∏è', GREEN)
        last_account_switch_time = time.time()

        account = accounts[rd_session_name]
        dest_entity = dests[rd_session_name]

        if rd_session_name in accounts_on_cooldown:
            remaining_cooldown = accounts_on_cooldown[rd_session_name] - time.time()
            if remaining_cooldown > 0:
                colored_print(f'  ‚è∞ –ê–∫–∫–∞—É–Ω—Ç {rd_session_name} –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ –µ—â—ë {remaining_cooldown:.2f} —Å–µ–∫—É–Ω–¥ üõå. –ü—Ä–æ–ø—É—Å–∫–∞–µ–º...', RED)
                await asyncio.sleep(delay_between_accounts)

                all_on_cooldown = True
                for s_name in session_names:
                    if s_name not in accounts_on_cooldown or accounts_on_cooldown[s_name] <= time.time():
                        all_on_cooldown = False
                        break
                if all_on_cooldown:
                    colored_print("  ‚ö† –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ üò¥. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.", RED)
                    await send_log_to_telegram("‚ö† –í—Å–µ –∞–∫–∫–∞—É–Ω—Ç—ã –Ω–∞ –ø–µ—Ä–µ—Ä—ã–≤–µ üò¥. –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É.")
                    sys.exit(1)

                continue
            else:
                del accounts_on_cooldown[rd_session_name]

        try:
            user = await account.get_input_entity(username)

            if not joined_group[rd_session_name]:
                try:
                    await account(JoinChannelRequest(dest_entity))
                    colored_print(f"    ‚ûï –ê–∫–∫–∞—É–Ω—Ç {rd_session_name} –≤—Å—Ç—É–ø–∏–ª –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É ‚úÖ", GREEN)
                    await send_log_to_telegram(f"‚ûï –ê–∫–∫–∞—É–Ω—Ç <b>{rd_session_name}</b> –≤—Å—Ç—É–ø–∏–ª –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É ‚úÖ")
                    joined_group[rd_session_name] = True
                    await asyncio.sleep(delay_after_join)
                except errors.rpcerrorlist.ImportBotAuthorizationRequiredError:
                    colored_print(f"    ‚õî –ê–∫–∫–∞—É–Ω—Ç {rd_session_name} - –±–æ—Ç ü§ñ. –ë–æ—Ç—ã –Ω–µ –º–æ–≥—É—Ç –≤—Å—Ç—É–ø–∞—Ç—å –≤ –≥—Ä—É–ø–ø—ã.", RED)
                    await send_log_to_telegram(f"‚ö† –ê–∫–∫–∞—É–Ω—Ç <b>{rd_session_name}</b> - –±–æ—Ç ü§ñ.")
                    joined_group[rd_session_name] = True
                    await asyncio.sleep(delay_after_error)
                    continue
                except Exception as e:
                    colored_print(f"    ‚õî –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ {rd_session_name} –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É: {e}", RED)
                    await send_log_to_telegram(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –∞–∫–∫–∞—É–Ω—Ç–∞ <b>{rd_session_name}</b> –≤ —Ü–µ–ª–µ–≤—É—é –≥—Ä—É–ø–ø—É: {e}")
                    await asyncio.sleep(delay_after_error)
                    continue

            if isinstance(user, InputPeerUser):
                await account(InviteToChannelRequest(dest_entity, [user]))
                colored_print(f"    ‚úâ {ind + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @{username} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ üì®", GREEN)

                participants = await account(GetParticipantsRequest(
                    dest_entity,
                    ChannelParticipantsSearch(username),
                    0, 1,
                    hash=0
                ))
                if participants.users:
                    colored_print(f"    ‚úÖ {ind + 1}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ", GREEN)
                    await send_log_to_telegram(f"‚úÖ [{ind+1}/{len(usernames)}] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <b>@{username}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω! üéâ (–∞–∫–∫–∞—É–Ω—Ç <b>{rd_session_name}</b>)")
                    with open(USED_FILE, 'a') as used_file:
                        used_file.write(f"{username}\n")
                else:
                    colored_print(f"    ‚ö† {ind + 1}: –ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} üòî", RED)
            else:
                colored_print(f"    ‚ö† {ind + 1}: –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å @{username}, —ç—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü§∑ (–≤–æ–∑–º–æ–∂–Ω–æ, –∫–∞–Ω–∞–ª, —á–∞—Ç –∏–ª–∏ –±–æ—Ç).", RED)
                await send_log_to_telegram(f"‚ö† –ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å @{username}, —ç—Ç–æ –Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ü§∑.")
                await asyncio.sleep(delay_after_error)
                continue

        except ValueError:
            colored_print(f'      ‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{username} –Ω–µ –Ω–∞–π–¥–µ–Ω ü§∑. 